# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [3.8, 3.9, "3.10"]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: setup package
      run: |
        python -m pip install --upgrade pip
        python setup.py install

  unittest:
    strategy:
      matrix:
        python: [3.8, 3.9, "3.10"]
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: install
      run: |
        python -m pip install --upgrade pip
        pip install coverage
        python setup.py -q install

    - name: test
      run: |
        coverage run -m unittest discover -s tests/unit
        coverage report -m --omit='tests/unit/*'

    - if: ${{ matrix.python == '3.10' }}
      name: Get Coverage for badge
      run: |
        coverage json
        COVERAGE=$(LC_NUMERIC="en_US.UTF-8" printf "%.2f%%" $(cat coverage.json | jq .totals.percent_covered))
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        REF=${{ github.ref }}
        echo "github.ref: $REF"
        IFS='/' read -ra PATHS <<< "$REF"
        BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
        echo $BRANCH_NAME
        echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV

    - if: ${{ matrix.python == '3.10' }}
      name: Create the Badge
      uses: schneegans/dynamic-badges-action@v1.4.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 9b54bd086e121233d2ad9a62d2136258
        filename: frarch__${{ env.BRANCH }}.json
        label: Test Coverage
        message: ${{ env.COVERAGE }}
        color: green
        namedLogo: codecov

  unittest-cross-platform:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: [build]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: install
      run: |
        python -m pip install --upgrade pip
        pip install coverage
        python setup.py -q install

    - name: test
      run: |
        coverage run -m unittest discover -s tests/unit
        coverage report -m --omit='tests/unit/*'

  functional:
    strategy:
      matrix:
        python: [3.8, 3.9, "3.10"]
    runs-on: ubuntu-latest
    needs: [build, unittest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: install
      run: |
        python -m pip install --upgrade pip
        pip install coverage
        python setup.py -q install
    - name: functional-test
      run: |
        cd tests/functional
        ./runFunctionalTests.sh

  package-and-release:
    runs-on: ubuntu-latest
    needs: [build, unittest, functional]
    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: install
      run: |
        pip install twine
        python setup.py sdist

    - name: Publish package
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
